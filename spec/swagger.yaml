# A Swagger 2.0 (a.k.a. OpenAPI) definition of the Flat API
#
# This is used for generating API documentation and the types used by the API clients.
#
# Some style notes:
# - This file is used by ReDoc, which allows GitHub Flavored Markdown in descriptions.
# - There is no maximum line length, for ease of editing and pretty diffs.

swagger: '2.0'

info:
  title: Flat API
  description: |
    The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:

    * Creating and importing new music scores using MusicXML, MIDI, Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar and MuseScore files
    * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI)
    * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.

    The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.
    The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/).
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).

    You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).

    Getting Started and learn more:

    * [API Overview and interoduction](https://flat.io/developers/docs/api/)
    * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html)
    * [SDKs](https://flat.io/developers/docs/api/sdks.html)
    * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html)
    * [Changelog](https://flat.io/developers/docs/api/changelog.html)
  version: 2.7.0
  termsOfService: https://flat.io/legal
  contact:
    name: Flat
    url: https://flat.io/developers/docs/api/
    email: developers@flat.io
  x-logo:
    url: https://flat.io/img/logo-flat.svg

host: api.flat.io
basePath: /v2
schemes:
- https

securityDefinitions:
  OAuth2:
    type: oauth2
    description: |
      OAuth 2.0 authentication for your app or. Please only request the most restrictive and needed scopes. Using some of the scopes may require an additional review from our team. The Flat API supports **authorization code** and **implicit** flows.
    authorizationUrl: https://flat.io/auth/oauth
    tokenUrl: https://api.flat.io/oauth/access_token
    flow: accessCode
    scopes:
      account.public_profile: |
        Provides access to the basic person's public profile. Education profiles may be anonymized with this scope, you can request the scope `education_profile` to access to the a basic education account profile.
      account.email: |
        Provices access to the person's email.
      account.education_profile: |
        Provides access to the basic person's education profile and public organization information.
      scores.readonly: |
        Allows read-only access to all a user's scores. You won't need this scope to read public scores.
      scores.social: |
        Allow to post comments and like scores
      scores: |
        Full, permissive scope to access all of a user's scores.
      collections.readonly: Allow read-only access to a user's collections.
      collections.add_scores: Allow to add scores to a user's collections.
      collections: Full, permissive scope to access all of a user's collections.
      edu.classes: Full, permissive scope to manage the classes.
      edu.classes.readonly: Read-only access to the classes.
      edu.assignments: Read-write access to the assignments and submissions.
      edu.assignments.readonly: Read-only access to the assignments and submissions.
      edu.admin: Full, permissive scope to manage all the admin of an organization.
      edu.admin.lti: Access and manage the LTI Credentials for an organization.
      edu.admin.lti.readonly: Read-only access to the LTI Credentials of an organization.
      edu.admin.users: Access and manage the users and invitations of the organization.
      edu.admin.users.readonly: Read-only access to the users and invitations of the organization.
tags:
- name: Account
  x-displayName: Flat Account
  description: |
    These API endpoints are related to the Flat account you are currently using. When using an OAuth2 access token, you can use [`GET /me`](#operation/getAuthenticatedUser) to get information about the account.
- name: Score
  x-displayName: Music scores
  description: |
    Sheet music is the main API object type available for all Flat account.
    Here is a typical lifecycle for a music score document on Flat:
      - An end user can **create a music score** or **import a document** using our [web interface](https://flat.io) or a third-party website/app (e.g. Google Drive) using this API (see [`POST /v2/scores`](#operation/createScore). The creation and import of music scores can be done with this single API endpoint. This one currently supports the [MusicXML](http://www.musicxml.com/) (compressed or not) and [MIDI](https://www.midi.org/specifications).
      - **List scores**:
        - The **owned scores** can be listed using the [collections API methods](#tag/Collection), especially [`GET /collections/{collection}/scores`](#operation/listCollectionScores).
        - The scores from a public account can be listed with [`GET /users/{user}/scores`](#operation/getUserScores).
        - Scores shared with a specific group can be listed with [`GET /groups/{group}/scores`](#operation/getGroupScores).
      - The metadata of a single score can be retrieved with [`GET /scores/{score}`](#operation/getScore).
      - Scores on Flat have **one or multiple revisions**: creating a new score will create a first revision. These **revisions can be listed** using [`GET /scores/{score}/revisions`](#operation/getScoreRevisions) and a specific **revision data can be downloaded** with [`GET /scores/{score}/revisions/{revision}/{format}`](#operation/getScoreRevisionData). New revisions can be created using our [sheet music editor](https://flat.io) or using [`POST /scores/{score}/revisions`](#operation/createScoreRevision) (this endpoint has similar parameters than during the score creation). The last revision of a document may not directly reflect the really last version of a music score: recent modifications can be made offline or not yet consolidated into a new revision. In average, a new revision is created every 100 modifications made with our editor.
      - Scores can be **shared publicly** by changing the privacy option with [`POST /scores/{score}`](#operation/editScore), or **individually shared** using the different collaborators API endpoints (see [`POST /scores/{score}/collaborators`](#operation/addScoreCollaborator)).
- name: Collection
  x-displayName: Collections of music scores
  description: |
    Collections let you organize your content in a Flat account. They work like a regular _folder_ with some specificities:
      - Our design goal here is to create a system similar to a _book_ or a _playlist of songs_.
      - Collections can't have children collections (except the `trash` and `sharedWithMe` that are special collections).
      - Any score can be added to one or multiple collections. For example, you can have a single private score in two or more collections, or add any public or shared scores to one of your collections.

    All the collections don't have the same capabilities. Capabilities depend on the `type` of collection and the `rights` you have on a collection. They are available when [listing the collection](#operation/listCollections) or [retrieving the collection details](#operation/getCollection).

    At this time, only `private` privacy mode is widely available. Privacy modes `public`, `organizationPublic` and `privateLink`, and 1:1 sharing will be available in an upcoming update later this year.
- name: User
  description: Flat users
- name: Organization
  description: Flat for Education organizations
- name: Class
  description: Flat for Education classes
- name: Group
  description: Flat Groups
paths:
  /me:
    get:
      tags: [Account]
      security:
      - OAuth2:
        - account.public_profile
        - account.education_profile
      summary: Get current user profile
      description: |
        Get details about the current authenticated User.
      operationId: getAuthenticatedUser
      produces:
      - application/json
      responses:
        200:
          description: Current user details
          schema:
            $ref: '#/definitions/UserDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores:
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Create a new score
      operationId: createScore
      description: |
        Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.

        This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).

        The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).

        If no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method.
        If a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones.
        You can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`.
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Score created
          schema:
            $ref: '#/definitions/ScoreDetails'
        400:
          description: Bad score creation request
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: Get a score's metadata
      description: |
        Get the details of a score identified by the `score` parameter in the URL.
        The currently authenticated user must have at least a read access to the document to use this API call.
      operationId: getScore
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: Score details
          schema:
            $ref: '#/definitions/ScoreDetails'
        402:
          description: Account overquota and this document is out of the granted quota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    put:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Edit a score's metadata
      description: |
        This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.

        To edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).

        When editing the `title` of the score, the API metadata are updated directly when calling this method, unlike the data itself.
        The title in the score data will be "lazy" updated at the next score save with the editor or our internal save.
      operationId: editScore
      parameters:
      - $ref: '#/parameters/score'
      - name: body
        in: body
        schema:
          $ref: '#/definitions/ScoreModification'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Score details
          schema:
            $ref: '#/definitions/ScoreDetails'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Delete a score
      description: |
        This method can be used by the owner/admin (`aclAdmin` rights) of a score as well as regular collaborators.

        When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history.
        The score won't be accessible anymore after calling this method and the user's quota will directly be updated.

        When called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account & own collections).
      operationId: deleteScore
      parameters:
      - $ref: '#/parameters/score'
      produces:
      - application/json
      responses:
        204:
          description: The score has been removed
        403:
          description: Not granted to manage this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/untrash:
    post:
      tags: [Score]
      security: []
      summary: Untrash a score
      description: |
        This method will remove the score from the `trash` collection and from the deletion queue, and add it back to the original collections.
      operationId: untrashScore
      parameters:
      - $ref: '#/parameters/score'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        204:
          description: The score has been untrashed
        403:
          description: Not granted to manage this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/submissions:
    get:
      tags: [Score, Class]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: List submissions related to the score
      description: |
        This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document.
      operationId: getScoreSubmissions
      parameters:
      - $ref: '#/parameters/score'
      produces:
      - application/json
      responses:
        200:
          description: List of submissions
          schema:
            type: array
            items:
              $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/fork:
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Fork a score
      description: |
        This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.

        When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.
      operationId: forkScore
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreFork'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Score details
          schema:
            $ref: '#/definitions/ScoreDetails'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/collaborators:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores.readonly
        - scores
      summary: List the collaborators
      description: |
        This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.

        Collaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).
      operationId: getScoreCollaborators
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: List of collaborators
          schema:
            type: array
            items:
              $ref: '#/definitions/ResourceCollaborator'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Add a new collaborator
      description: |
        Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource.
        - To add an existing Flat user to the resource, specify its unique identifier in the `user` property.
        - To invite an external user to the resource, specify its email in the `userEmail` property.
        - To add a Flat group to the resource, specify its unique identifier in the `group` property.
        - To update an existing collaborator, process the same request with different rights.
      operationId: addScoreCollaborator
      parameters:
      - $ref: '#/parameters/score'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ResourceCollaboratorCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The newly added collaborator metadata
          schema:
            $ref: '#/definitions/ResourceCollaborator'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to manage this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/collaborators/{collaborator}:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores.readonly
      summary: Get a collaborator
      description: |
        Get the information about a collaborator (User or Group).
      operationId: getScoreCollaborator
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/resourceCollaborator'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: Collaborator information
          schema:
            $ref: '#/definitions/ResourceCollaborator'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or collaborator not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Delete a collaborator
      description: |
        Remove the specified collaborator from the score
      operationId: removeScoreCollaborator
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/resourceCollaborator'
      produces:
      - application/json
      responses:
        204:
          description: The collaborator has been removed
        403:
          description: Not granted to manage this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or collaborator not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/tracks:
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Add a new video or audio track to the score
      description: |
        Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score.
        This API method support medias hosted on SoundCloud, YouTube and Vimeo.
      operationId: addScoreTrack
      parameters:
      - $ref: '#/parameters/score'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreTrackCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Created track
          schema:
            $ref: '#/definitions/ScoreTrack'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: List the audio or video tracks linked to a score
      operationId: listScoreTracks
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: List of tracks
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreTrack'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/tracks/{track}:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: Retrieve the details of an audio or video track linked to a score
      operationId: getScoreTrack
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreTrack'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: Track details
          schema:
            $ref: '#/definitions/ScoreTrack'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or Track not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    put:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Update an audio or video track linked to a score
      operationId: updateScoreTrack
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreTrack'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreTrackUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Updated track
          schema:
            $ref: '#/definitions/ScoreTrack'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or Track not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Remove an audio or video track linked to the score
      operationId: deleteScoreTrack
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreTrack'
      produces:
      - application/json
      responses:
        204:
          description: Track removed
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or Track not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/comments:
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores.social
        - scores
      summary: Post a new comment
      description: |
        Post a document or a contextualized comment on a document.

        Please note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.
      operationId: postScoreComment
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreCommentCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new comment
          schema:
            $ref: '#/definitions/ScoreComment'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score, to post a comment, or your API call triggered our spam filter.
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores.readonly
        - scores.social
        - scores
      summary: List comments
      description: This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
      operationId: getScoreComments
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      - name: type
        in: query
        type: string
        enum: [document, inline]
        description: Filter the comments by type
      - name: sort
        in: query
        type: string
        enum: [date]
        description: Sort
      - $ref: '#/parameters/sortDirection'
      produces:
      - application/json
      responses:
        200:
          description: The comments of the score
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreComment'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
  /scores/{score}/comments/{comment}:
    put:
      tags: [Score]
      security:
      - OAuth2:
        - scores.social
        - scores
      summary: Update an existing comment
      operationId: updateScoreComment
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreComment'
      - $ref: '#/parameters/sharingKey'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreCommentUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The edited comment
          schema:
            $ref: '#/definitions/ScoreComment'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score or not the original comment creator
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Score]
      security:
      - OAuth2:
        - scores.social
        - scores
      summary: Delete a comment
      operationId: deleteScoreComment
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreComment'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        204:
          description: The comment has been deleted
        403:
          description: Not granted to access to this score or not the original comment creator
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or comment not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
  /scores/{score}/comments/{comment}/resolved:
    put:
      tags: [Score]
      security:
      - OAuth2:
        - scores.social
        - scores
      summary: Mark the comment as resolved
      operationId: markScoreCommentResolved
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreComment'
      - $ref: '#/parameters/sharingKey'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        204:
          description: The comment has been marked as resolved
        403:
          description: Not granted to mark this comment as resolved
        404:
          description: Score or comment not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Score]
      security:
      - OAuth2:
        - scores.social
        - scores
      summary: Mark the comment as unresolved
      operationId: markScoreCommentUnresolved
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreComment'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        204:
          description: The comment has been unmarked as resolved
        403:
          description: Not granted to unmark this comment as resolved
        404:
          description: Score or comment not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/revisions:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: List the revisions
      description: |
        When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.

        Depending the plan of the account, this list can be trunked to the few last revisions.
      operationId: getScoreRevisions
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: List of revisions
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreRevision'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    post:
      tags: [Score]
      security:
      - OAuth2:
        - scores
      summary: Create a new revision
      description: |
        Update a score by uploading a new revision for this one.
      operationId: createScoreRevision
      parameters:
      - $ref: '#/parameters/score'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ScoreRevisionCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new created revision metadata
          schema:
            $ref: '#/definitions/ScoreRevision'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to modify this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/revisions/{revision}:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: Get a score revision
      description: |
        When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific
        revision metadata.
      operationId: getScoreRevision
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreRevision'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: Revision metadata
          schema:
            $ref: '#/definitions/ScoreRevision'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /scores/{score}/revisions/{revision}/{format}:
    get:
      tags: [Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: Get a score revision data
      description: |
        Retrieve the file corresponding to a score revision (the following formats are available: Flat JSON/Adagio JSON `json`, MusicXML
        `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, or a tumbnail of the first page `thumbnail.png`).
      operationId: getScoreRevisionData
      parameters:
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/scoreRevision'
      - $ref: '#/parameters/sharingKey'
      - $ref: '#/parameters/scoreParts'
      - name: format
        in: path
        description: The format of the file you will retrieve
        type: string
        enum: [json, mxl, xml, mp3, wav, midi, thumbnail.png]
        required: true
      - name: onlyCached
        in: query
        description: |
          Only return files already generated and cached in Flat's production
          cache. If the file is not availabe, a 404 will be returned
        type: boolean
      produces:
      - application/json
      - application/vnd.recordare.musicxml+xml
      - application/vnd.recordare.musicxml
      - audio/mp3
      - audio/wav
      - audio/midi
      - image/png
      responses:
        200:
          description: Revision data
          schema:
            type: string
            format: binary
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        403:
          description: Not granted to access to this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score or associated file not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /collections:
    post:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      summary: Create a new collection
      description: |
        This method will create a new collection and add it to your `root` collection.
      operationId: createCollection
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/CollectionCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Collection created
          schema:
            $ref: '#/definitions/Collection'
        400:
          description: Bad collection creation request
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
        - collections.readonly
      summary: List the collections
      description: |
        Use this method to list the user's collections contained in `parent` (by default in the `root` collection).
        If no sort option is provided, the collections are sorted by `creationDate` `desc`.

        Note that this method will not include the `parent` collection in the listing.
        For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.
      operationId: listCollections
      parameters:
      - name: parent
        in: query
        type: string
        default: root
        description: |
          List the collection contained in this `parent` collection.

          This option doesn't provide a complete multi-level collection support.
          When sharing a collection with someone, this one will have as `parent` `sharedWithMe`.
      - name: sort
        in: query
        type: string
        enum: [creationDate, title]
        description: Sort
      - $ref: '#/parameters/sortDirection'
      - $ref: '#/parameters/limitDefault25Max100'
      - $ref: '#/parameters/next'
      - $ref: '#/parameters/previous'
      produces:
      - application/json
      responses:
        200:
          description: List of collections
          schema:
            type: array
            items:
              $ref: '#/definitions/Collection'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /collections/{collection}:
    get:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
        - collections.readonly
      summary: Get collection details
      operationId: getCollection
      parameters:
      - $ref: '#/parameters/collection'
      - $ref: '#/parameters/sharingKey'
      produces:
      - application/json
      responses:
        200:
          description: Collection details
          schema:
            $ref: '#/definitions/Collection'
        403:
          description: Not granted to access to this collection
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Collection not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    put:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      summary: Update a collection's metadata
      operationId: editCollection
      parameters:
      - $ref: '#/parameters/collection'
      - name: body
        in: body
        schema:
          $ref: '#/definitions/CollectionModification'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Collection details
          schema:
            $ref: '#/definitions/Collection'
        403:
          description: Not granted to access to this collection
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Collection not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      summary: Delete the collection
      description: |
        This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`.
      operationId: deleteCollection
      parameters:
      - $ref: '#/parameters/collection'
      produces:
      - application/json
      responses:
        204:
          description: Collection deleted
        403:
          description: Not granted to access to this collection
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Collection not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /collections/{collection}/untrash:
    post:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      summary: Untrash a collection
      description: |
        This method will restore the collection by removing it from the `trash` and add it back to the `root` collection.
      operationId: untrashCollection
      parameters:
      - $ref: '#/parameters/collection'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        204:
          description: The score has been untrashed
        403:
          description: Not granted to manage this score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /collections/{collection}/scores:
    get:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      operationId: listCollectionScores
      summary: List the scores contained in a collection
      description: |
        Use this method to list the scores contained in a collection.
        If no sort option is provided, the scores are sorted by `modificationDate` `desc`.
      parameters:
      - $ref: '#/parameters/collection'
      - $ref: '#/parameters/sharingKey'
      - name: sort
        in: query
        type: string
        enum: [creationDate, modificationDate, title]
        description: Sort
      - $ref: '#/parameters/sortDirection'
      - $ref: '#/parameters/limitDefault25Max100'
      - $ref: '#/parameters/next'
      - $ref: '#/parameters/previous'
      produces:
      - application/json
      responses:
        200:
          description: List of scores
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /collections/{collection}/scores/{score}:
    put:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
        - collections.add_scores
      operationId: addScoreToCollection
      summary: Add a score to the collection
      description: |
        This operation will add a score to a collection. The default behavior will make the score available across multiple collections.
        You must have the capability `canAddScores` on the provided `collection` to perform the action.
      parameters:
      - $ref: '#/parameters/collection'
      - $ref: '#/parameters/score'
      - $ref: '#/parameters/sharingKey'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: Score details
          schema:
            $ref: '#/definitions/ScoreDetails'
        403:
          description: Not granted to access to this collection or score
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Collection or score not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Collection]
      security:
      - OAuth2:
        - collections
      operationId: deleteScoreFromCollection
      summary: Delete a score from the collection
      description: |
        This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection.
        This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.
      parameters:
      - $ref: '#/parameters/collection'
      - $ref: '#/parameters/score'
      produces:
      - application/json
      responses:
        204:
          description: Score removed from the collection
        403:
          description: Not granted to access to this collection
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Collection not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /users/{user}:
    get:
      tags: [User]
      security:
      - OAuth2:
        - account.public_profile
        - account.education_profile
      summary: Get a public user profile
      description: |
        Get a public profile of a Flat User.
      operationId: getUser
      parameters:
      - name: user
        in: path
        description: |
          This route parameter is the unique identifier of the user. You can specify an email instead of an unique identifier. If you are executing this request authenticated, you can use `me` as a value instead of the current User unique identifier to work on the current authenticated user.
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: The user public details
          schema:
            $ref: '#/definitions/UserPublic'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
  /users/{user}/likes:
    get:
      tags: [User, Score]
      security:
      - OAuth2:
        - account.public_profile
      summary: List liked scores
      operationId: gerUserLikes
      parameters:
      - $ref: '#/parameters/user'
      - name: ids
        in: query
        description: Return only the identifiers of the scores
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: List of liked scores
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
  /users/{user}/scores:
    get:
      tags: [User, Score]
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: List user's scores
      description: |
        Get the list of public scores owned by a User.

        **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.
        This method will no longer list private and shared scores, but only public scores of a Flat account.
        If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.
      operationId: getUserScores
      parameters:
      - $ref: '#/parameters/user'
      - name: parent
        in: query
        type: string
        description: Filter the score forked from the score id `parent`
      produces:
      - application/json
      responses:
        200:
          description: The user scores
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/users:
    post:
      tags: [Organization]
      summary: Create a new user account
      operationId: createOrganizationUser
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/UserCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: New user created
          schema:
            $ref: '#/definitions/UserDetailsAdmin'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Organization]
      summary: List the organization users
      operationId: listOrganizationUsers
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
        - edu.admin.users.readonly
      parameters:
      - name: role
        in: query
        description: Filter users by role
        type: string
        enum: [user, teacher, admin]
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/next'
      - $ref: '#/parameters/previous'
      produces:
      - application/json
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDetailsAdmin'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/users/{user}:
    put:
      tags: [Organization]
      summary: Update account information
      operationId: updateOrganizationUser
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
      parameters:
      - $ref: '#/parameters/organizationUser'
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserAdminUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: User updated
          schema:
            $ref: '#/definitions/UserDetailsAdmin'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Organization]
      summary: Remove an account from Flat
      description: |
        This operation removes an account from Flat and its data, including:
        * The music scores created by this user (documents, history, comments, collaboration information)
        * Education related data (assignments and classroom information)
      operationId: removeOrganizationUser
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
      parameters:
      - $ref: '#/parameters/organizationUser'
      - name: convertToIndividual
        in: query
        type: boolean
        description: |
          If `true`, the account will be only removed from the organization and converted into an individual account on our public website, https://flat.io.
          This operation will remove the education-related data from the account.
          Before realizing this operation, you need to be sure that the user is at least 13 years old and that this one has read and agreed to the Individual Terms of Services of Flat available on https://flat.io/legal.
      produces:
      - application/json
      responses:
        204:
          description: User deleted
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/invitations:
    post:
      tags: [Organization]
      summary: Create a new invitation to join the organization
      description: |
        This method creates and sends invitation for teachers and admins.

        Invitations can only be used by new Flat users or users who are not part of the organization yet.

        If the email of the user is already associated to a user of your organization, the API will simply update the role of the existing user and won't send an invitation. In this case, the property `usedBy` will be directly filled with the uniquer identifier of the corresponding user.
      operationId: createOrganizationInvitation
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/OrganizationInvitationCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: New invitation created
          schema:
            $ref: '#/definitions/OrganizationInvitation'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Organization]
      summary: List the organization invitations
      operationId: listOrganizationInvitations
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
        - edu.admin.users.readonly
      parameters:
      - name: role
        in: query
        description: Filter users by role
        type: string
        enum: [user, teacher, admin]
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/next'
      - $ref: '#/parameters/previous'
      produces:
      - application/json
      responses:
        200:
          description: List of invitations
          schema:
            type: array
            items:
              $ref: '#/definitions/OrganizationInvitation'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/invitations/{invitation}:
    delete:
      tags: [Organization]
      summary: Remove an organization invitation
      operationId: removeOrganizationInvitation
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
      parameters:
      - name: invitation
        in: path
        description: Unique identifier of the invitation
        type: string
        required: true
      produces:
      - application/json
      responses:
        204:
          description: The invitation has been removed
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/lti/credentials:
    post:
      tags: [Organization]
      summary: Create a new couple of LTI 1.x credentials
      description: |
        Flat for Education is a Certified LTI Provider. You can use these API methods to automate the creation of LTI credentials. You can read more about our LTI implementation, supported components and LTI Endpoints in our [Developer Documentation](https://flat.io/developers/docs/lti/).
      operationId: createLtiCredentials
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.lti
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/LtiCredentialsCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The LTI Credentials
          schema:
            $ref: '#/definitions/LtiCredentials'
        403:
          description: Not admin of an organization
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Organization]
      summary: List LTI 1.x credentials
      operationId: listLtiCredentials
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.lti
        - edu.admin.lti.readonly
      produces:
      - application/json
      responses:
        200:
          description: The list of LTI Credentials
          schema:
            type: array
            items:
              $ref: '#/definitions/LtiCredentials'
        403:
          description: Not admin of an organization
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /organizations/lti/credentials/{credentials}:
    delete:
      tags: [Organization]
      summary: Revoke LTI 1.x credentials
      operationId: revokeLtiCredentials
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.lti
      parameters:
      - name: credentials
        in: path
        description: |
          Credentials unique identifier
        type: string
        required: true
      produces:
      - application/json
      responses:
        204:
          description: Credentials revoked
        403:
          description: Not admin of an organization
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        404:
          description: Credentials not found
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes:
    post:
      tags: [Class]
      summary: Create a new class
      description: |
        Classrooms on Flat allow you to create activities with assignments and post content to a specific group.

        When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.

        If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.

        You can add users to this class using `POST /classes/{class}/users/{user}`, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using `POST /classes/enroll/{enrollmentCode}` and the `enrollmentCode` returned in the `ClassDetails` response.
      operationId: createClass
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ClassCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new class details
          schema:
            $ref: '#/definitions/ClassDetails'
        402:
          description: Account overquota
          schema:
            $ref: '#/definitions/FlatErrorResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Class]
      summary: List the classes available for the current user
      operationId: listClasses
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
      parameters:
      - name: state
        in: query
        type: string
        default: active
        description: Filter the classes by state
        enum: [active, inactive, archived]
      produces:
      - application/json
      responses:
        200:
          description: The list of classes
          schema:
            type: array
            items:
              $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}:
    get:
      tags: [Class]
      summary: Get the details of a single class
      operationId: getClass
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: The new class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    put:
      tags: [Class]
      summary: Update the class
      description: |
        Update the meta information of the class
      operationId: updateClass
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: body
        in: body
        description: Details of the Class
        schema:
          $ref: '#/definitions/ClassUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/archive:
    post:
      tags: [Class]
      summary: Archive the class
      operationId: archiveClass
      description: |
        Mark the class as `archived`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Class]
      summary: Unarchive the class
      description: |
        Mark the class as `active`. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated.
      operationId: unarchiveClass
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: The class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/activate:
    post:
      tags: [Class]
      summary: Activate the class
      operationId: activateClass
      description: |
        Mark the class as `active`. This is mainly used for classes synchronized from Clever that are initially with an `inactive` state and hidden in the UI.
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/users/{user}:
    put:
      tags: [Class]
      summary: Add a user to the class
      description: |
        This method can be used by a teacher of the class to enroll another Flat user into the class.

        Only users that are part of your Organization can be enrolled in a class of this same Organization.

        When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization.
      operationId: addClassUser
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: user
        in: path
        description: Unique identifier of the user
        type: string
        required: true
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        204:
          description: The user has been added to the class
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    delete:
      tags: [Class]
      summary: Remove a user from the class
      operationId: deleteClassUser
      description: |
        This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.

        Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions.
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: user
        in: path
        description: Unique identifier of the user
        type: string
        required: true
      produces:
      - application/json
      responses:
        204:
          description: The user has been removed from the class
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/students/{user}/submissions:
    get:
      tags: [Class]
      summary: List the submissions for a student
      description: |
        Use this method as a teacher to list all the assignment submissions sent by a student of the class
      operationId: listClassStudentSubmissions
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
        - edu.assignments
        - edu.assignments.readonly
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: user
        in: path
        description: Unique identifier of the user
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: The list of submissions
          schema:
            type: array
            items:
              $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/assignments:
    post:
      tags: [Class]
      summary: Assignment creation
      operationId: createAssignment
      description: |
        Use this method as a teacher to create and post a new assignment to a class.

        If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course.
      security:
      - OAuth2:
        - edu.classes
        - edu.assignments
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: body
        in: body
        schema:
          $ref: '#/definitions/AssignmentCreation'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The assignment has been created
          schema:
            $ref: '#/definitions/Assignment'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Class]
      summary: Assignments listing
      operationId: listAssignments
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
        - edu.assignments
        - edu.assignments.readonly
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: List of assignments for the class
          schema:
            type: array
            items:
              $ref: '#/definitions/Assignment'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/assignments/{assignment}/copy:
    post:
      tags: [Class]
      summary: Copy an assignment
      description: |
        Copy an assignment to a specified class.

        If the original assignment has a due date in the past, this new assingment will be created without a due date.

        If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app.
      operationId: copyAssignment
      security:
      - OAuth2:
        - edu.classes
        - edu.assignments
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: assignment
        in: path
        description: Unique identifier of the assignment
        type: string
        required: true
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/AssignmentCopy'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new created assingment
          schema:
            $ref: '#/definitions/Assignment'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/assignments/{assignment}/submissions:
    put:
      tags: [Class]
      summary: Create or edit a submission
      description: |
        Use this method as a student to create, update and submit a submission related to an assignment. Students can only set `attachments`, `studentComment` and `submit`.

        Teachers can use `PUT /classes/{class}/assignments/{assignment}/submissions/{submission}` to update a submission by id.
      operationId: createSubmission
      security:
      - OAuth2:
        - edu.classes
        - edu.assignments
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: assignment
        in: path
        description: Unique identifier of the assignment
        type: string
        required: true
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/AssignmentSubmissionUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The submission
          schema:
            $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Class]
      summary: List the students' submissions
      operationId: getSubmissions
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
        - edu.assignments
        - edu.assignments.readonly
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: assignment
        in: path
        description: Unique identifier of the assignment
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: The submissions
          schema:
            type: array
            items:
              $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/{class}/assignments/{assignment}/submissions/{submission}:
    put:
      tags: [Class]
      summary: Edit a submission
      description: |
        Use this method as a teacher to update the different submission and give feedback.
        Teachers can only set `returnFeedback`
      operationId: editSubmission
      security:
      - OAuth2:
        - edu.classes
        - edu.assignments
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: assignment
        in: path
        description: Unique identifier of the assignment
        type: string
        required: true
      - name: submission
        in: path
        description: Unique identifier of the submission
        type: string
        required: true
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/AssignmentSubmissionUpdate'
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The submission
          schema:
            $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
    get:
      tags: [Class]
      summary: Get a student submission
      operationId: getSubmission
      security:
      - OAuth2:
        - edu.classes
        - edu.classes.readonly
        - edu.assignments
        - edu.assignments.readonly
      parameters:
      - name: class
        in: path
        description: Unique identifier of the class
        type: string
        required: true
      - name: assignment
        in: path
        description: Unique identifier of the assignment
        type: string
        required: true
      - name: submission
        in: path
        description: Unique identifier of the submission
        type: string
        required: true
      produces:
      - application/json
      responses:
        200:
          description: A submission
          schema:
            $ref: '#/definitions/AssignmentSubmission'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /classes/enroll/{enrollmentCode}:
    post:
      tags: [Class]
      summary: Join a class
      description: |
        Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the `ClassDetails` returned to the teachers when creating the class or listing / fetching a specific class.

        Flat will automatically add the user to the corresponding class group based on this role in the organization.
      operationId: enrollClass
      security:
      - OAuth2:
        - edu.classes
      parameters:
      - name: enrollmentCode
        in: path
        description: |
          The enrollment code, available to the teacher in `ClassDetails`
        type: string
        required: true
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: The new class details
          schema:
            $ref: '#/definitions/ClassDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /groups/{group}:
    get:
      tags:
      - Group
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
        - edu.admin.users.readonly
        - edu.classes
        - edu.classes.readonly
      summary: Get group information
      operationId: getGroupDetails
      parameters:
      - $ref: '#/parameters/group'
      produces:
      - application/json
      responses:
        200:
          description: The group details
          schema:
            $ref: '#/definitions/GroupDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /groups/{group}/users:
    get:
      tags:
      - Group
      security:
      - OAuth2:
        - edu.admin
        - edu.admin.users
        - edu.admin.users.readonly
        - edu.classes
        - edu.classes.readonly
      summary: List group's users
      operationId: listGroupUsers
      parameters:
      - $ref: '#/parameters/group'
      produces:
      - application/json
      responses:
        200:
          description: The list of users member of the group
          schema:
            type: array
            items:
              $ref: '#/definitions/UserPublic'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'

  /groups/{group}/scores:
    get:
      tags:
      - Group
      - Score
      security:
      - OAuth2:
        - scores
        - scores.readonly
      summary: List group's scores
      description: |
        Get the list of scores shared with a group.
      operationId: getGroupScores
      parameters:
      - $ref: '#/parameters/group'
      - name: parent
        in: query
        type: string
        description: Filter the score forked from the score id `parent`
      produces:
      - application/json
      responses:
        200:
          description: The group's scores
          schema:
            type: array
            items:
              $ref: '#/definitions/ScoreDetails'
        default:
          description: Error
          schema:
            $ref: '#/definitions/FlatErrorResponse'
parameters:
  limit:
    name: limit
    in: query
    description: This is the maximum number of objects that may be returned
    type: integer
    minimum: 1
    maximum: 1000
    default: 50
  limitDefault25Max100:
    name: limit
    in: query
    description: This is the maximum number of objects that may be returned
    type: integer
    minimum: 1
    maximum: 100
    default: 25
  next:
    name: next
    in: query
    description: |
      An opaque string cursor to fetch the next page of data.
      The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    type: string
  previous:
    name: previous
    in: query
    description: |
      An opaque string cursor to fetch the previous page of data.
      The paginated API URLs are returned in the `Link` header when requesting the API. These URLs will contain a `next` and `previous` cursor based on the available data.
    type: string
  sortDirection:
    name: direction
    in: query
    description: Sort direction
    type: string
    enum: [asc, desc]
  score:
    name: score
    in: path
    description: |
      Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. `ScoreDetails.id`) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with `drive-` (e.g. `drive-0B000000000`).
    type: string
    required: true
  sharingKey:
    name: sharingKey
    in: query
    type: string
    description: |
      This sharing key must be specified to access to a score or collection with a `privacy` mode set to `privateLink` and the current user is not a collaborator of the document.
  scoreRevision:
    name: revision
    in: path
    description: |
      Unique identifier of a score revision. You can use `last` to fetch the information related to the last version created.
    type: string
    required: true
  scoreParts:
    name: parts
    in: query
    type: string
    description: |
      An optional a set of parts to be exported. This parameter must be
      specified with a list of integers. For example "1,2,5".
  resourceCollaborator:
    name: collaborator
    in: path
    description: |
      Unique identifier of a **collaborator permission**, or unique identifier of a **User**, or unique identifier of a **Group**
    type: string
    required: true
  scoreTrack:
    name: track
    in: path
    description: |
      Unique identifier of a score audio track
    type: string
    required: true
  scoreComment:
    name: comment
    in: path
    description: |
      Unique identifier of a sheet music comment
    type: string
    required: true
  collection:
    name: collection
    in: path
    description: |
      Unique identifier of the collection.
      The following aliases are supported:
      - `root`: The root collection of the account
      - `sharedWithMe`: Automatically contains new resources that have been shared individually
      - `trash`: Automatically contains resources that have been deleted
    type: string
    required: true
  user:
    name: user
    in: path
    description: |
      Unique identifier of a Flat user. If you authenticated, you can use `me` to refer to the current user.
    type: string
    required: true
  group:
    name: group
    in: path
    description: |
      Unique identifier of a Flat group
    type: string
    required: true
  organizationUser:
    name: user
    in: path
    description: |
      Unique identifier of the Flat account
    type: string
    required: true
definitions:
  FlatLocales:
    type: string
    description: The user language
    enum: [en, es, fr, de, it, ja, ko, nl, pl, pt, ro, ru, zh-Hans]
    default: en
  OrganizationRoles:
    type: string
    description: User's Organization Role (for Edu users only)
    enum: [admin, billing, teacher, user]
  ClassRoles:
    type: string
    description: User's Class Role (for Edu users only)
    enum: [teacher, student]
  LicenseMode:
    type: string
    description: Mode of the license
    enum: [credit, site]
  LicenseSources:
    type: string
    description: Source of the license
    enum: [order, trial, voucher, distributor, subscription]
    default: order
  UserBasics:
    type: object
    discriminator: userType
    properties:
      id:
        type: string
        description: The user unique identifier
      username:
        type: string
        description: The user name (unique for the organization)
      name:
        description: A displayable name for the user
        type: string
      printableName:
        type: string
        description: The name that can be directly printed (name or username)
      picture:
        description: User pictue
        type: string
      isPowerUser:
        description: User license status. 'True' if user is an individual Power user
        type: boolean
    example:
      id: '000000000000000000000001'
      username: flat
      name: Flat Team
      printableName: Flat Team
      picture: https://flat.io/img/logo_flat.svg
      isPowerUser: true

  UserPublicSummary:
    description: Public User details summary
    allOf:
    - $ref: '#/definitions/UserBasics'
    - type: object
      properties:
        organization:
          type: string
          description: Organization ID (for Edu users only)
        organizationRole:
          $ref: '#/definitions/OrganizationRoles'
        classRole:
          $ref: '#/definitions/ClassRoles'
        htmlUrl:
          type: string
          description: Link to user profile (for Indiv. users only)
    example:
      id: '000000000000000000000001'
      username: flat
      name: Flat Team
      printableName: Flat Team
      picture: https://flat.io/img/logo_flat.svg
      isPowerUser: true
      organization: '0000000000000000000000042'
      organizationRole: admin
      classRole: teacher
      htmlUrl: https://flat.io/flat

  UserPublic:
    description: Public User details
    allOf:
    - $ref: '#/definitions/UserPublicSummary'
    - type: object
      properties:
        bio:
          type: string
          description: User's biography
        registrationDate:
          type: string
          format: date-time
          description: Date the user signed up
        likedScoresCount:
          type: integer
          description: Number of the scores liked by the user
        followersCount:
          type: integer
          description: Number of followers the user have
        followingCount:
          type: integer
          description: Number of people the user follow
        ownedPublicScoresCount:
          type: integer
          description: Number of public scores the user have
        profileTheme:
          type: string
          description: Theme (background) for the profile
        instruments:
          $ref: '#/definitions/UserInstruments'
    example:
      id: '000000000000000000000001'
      username: flat
      name: Flat Team
      printableName: Flat Team
      picture: https://flat.io/img/logo_flat.svg
      isPowerUser: true
      organization: '0000000000000000000000042'
      organizationRole: admin
      classRole: teacher
      htmlUrl: https://flat.io/flat
      bio: The Flat Team
      registrationDate: '2015-01-19T00:22:02.387Z'
      likedScoresCount: 1
      followersCount: 4242
      followingCount: 0
      ownedPublicScoresCount: 10
      profileTheme: blue-8
      instruments:
      - woodwinds.flute
      - woodwinds.clarinet

  UserDetailsAdmin:
    description: User details (view for organization teacher / admin)
    allOf:
    - $ref: '#/definitions/UserPublicSummary'
    - type: object
      properties:
        email:
          type: string
          format: email
          description: Email of the user
        lastActivityDate:
          description: Date of the last user activity
          type: string
          format: date-time
        license:
          type: object
          description: Current active license of the user
          properties:
            id:
              type: string
              description: ID of the current license
            expirationDate:
              type: string
              format: date-time
              description: Date when the license expires
            source:
              $ref: '#/definitions/LicenseSources'
            mode:
              $ref: '#/definitions/LicenseMode'
            active:
              type: boolean
              description: ID of the current license

  UserCreation:
    type: object
    description: User creation
    required:
    - username
    - password
    properties:
      username:
        description: Username of the new account
        type: string
        pattern: ^[A-Za-z0-9\-_.]+$
      email:
        description: Email of the new account
        type: string
        format: email
      password:
        description: Password of the new account
        type: string
        format: password
        minLength: 6
      locale:
        $ref: '#/definitions/FlatLocales'
  UserAdminUpdate:
    type: object
    description: User update as an organization admin
    properties:
      password:
        description: Password of the new account
        type: string
        format: password
        minLength: 6
      organizationRole:
        $ref: '#/definitions/OrganizationRoles'
  UserInstruments:
    type: array
    description: |
      An array of the instrument identifiers that the user plays.
      This is mainly used to display a list of the instruments in the Flat's UI or instruments icons.
      The format of the strings is `{instrument-group}.{instrument-id}`.
    items:
      type: string
      pattern: ^[a-z-]+\.[a-z-]+$
    example:
    - keyboards.grand-piano
    - brass.trumpet
    - strings.violin

  UserDetails:
    type: object
    description: User details
    allOf:
    - $ref: '#/definitions/UserPublic'
    - type: object
      properties:
        id:
          type: string
          description: Identifier of the user
        type:
          type: string
          enum: [user, guest]
          description: The type of account
        privateProfile:
          type: boolean
          description: Tell either this user profile is private or not (individual accounts only)
        locale:
          $ref: '#/definitions/FlatLocales'
  Group:
    type: object
    description: A group of users
    properties:
      id:
        description: The unique identifier of the group
        type: string
      name:
        description: The display name of the group
        type: string
      type:
        description: |
          The type of the group:
          * `generic`: A group created by a Flat user
          * `classTeachers`: A group created automaticaly by Flat that contains
            the teachers of a class
          * `classStudents`: A group created automaticaly by Flat that contains
            the studnets of a class
        enum: [generic, classTeachers, classStudents]
        type: string
      usersCount:
        description: The number of users in this group
        type: number
      readOnly:
        description: |
          `True` if the group is set in read-only
        type: boolean
      organization:
        description: |
          If the group is related to an organization, this field will contain
          the unique identifier of the organization
        type: string
      creationDate:
        description: The creation date of the group
        type: string
        format: date-time
    example:
      id: '0000000000000000000000043'
      name: 5th grade
      type: classTeachers
      userCount: 24
      readOnly: true
      organization: '0000000000000000000000042'
      creationDate: '2015-01-19T00:22:02.387Z'
  ResourceRights:
    type: object
    description: The rights of the current user on a score or collection
    properties:
      aclRead:
        description: |
          `True` if the current user can read the current document
        type: boolean
        default: false
      aclWrite:
        description: |
          `True` if the current user can modify the current document.

          If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
        type: boolean
        default: false
      aclAdmin:
        description: |
          `True` if the current user can manage the current document (i.e. share, delete)

          If this is a right of a Collection, the capabilities of the associated user can be lower than this permission, check out the `capabilities` property as the end-user to have the complete possibilities with the collection.
        type: boolean
        default: false
      isCollaborator:
        description: |
          `True` if the current user is a collaborator of the current document (direct or via group).
        type: boolean
        default: false
    example:
      aclRead: true
      aclWrite: true
      aclAdmin: true
      isCollaborator: true

  ResourceCollaborator:
    description: |
      A collaborator of a score. The `userEmail` and `group` are only available if the requesting user is a collaborator of the related score (in this case these permissions will eventualy not be listed and exposed publicly).
    allOf:
    - $ref: '#/definitions/ResourceRights'
    - type: object
      properties:
        id:
          description: The unique identifier of the permission
          type: string
        score:
          description: If this object is a permission of a score, this property will contain the unique identifier of the score
          type: string
        collection:
          description: If this object is a permission of a collection, this property will contain the unique identifier of the collection
          type: string
        user:
          $ref: '#/definitions/UserPublic'
        group:
          $ref: '#/definitions/Group'
        userEmail:
          description: |
            If the collaborator is not a user of Flat yet, this field will contain his email.
          type: string
    example:
      id: '000000000000000000000031'
      score: '000000000000000000000040'
      userEmail: user@example.com
      aclRead: true
      aclWrite: true
      aclAdmin: true

  ResourceCollaboratorCreation:
    type: object
    description: Add a collaborator to a resource.
    properties:
      user:
        description: The unique identifier of a Flat user
        type: string
      group:
        description: The unique identifier of a Flat group
        type: string
      userEmail:
        description: |
          Fill this field to invite an individual user by email.
        type: string
      userToken:
        description: |
          Token received in an invitation to join the score.
        type: string
      aclRead:
        description: |
          `True` if the related user can read the score. (probably true if the user has a permission on the document).
        type: boolean
        default: true
      aclWrite:
        description: |
          `True` if the related user can modify the score.
        type: boolean
        default: false
      aclAdmin:
        description: |
          `True` if the related user can can manage the current document, i.e. changing the document permissions and deleting the document
        type: boolean
        default: false
    example:
      userEmail: jdoe@flat.io
      aclRead: true
      aclWrite: true
      aclAdmin: false

  ResourceSharingKey:
    type: string
    pattern: ^[a-f0-9]{128}$
    description: When using the `privacy` mode `privateLink`, this property can be used to set a custom sharing key, otherwise a new key will be generated.

  ScoreSummary:
    type: object
    description: A summary of the score details
    properties:
      id:
        description: The unique identifier of the score
        type: string
      sharingKey:
        description: The private sharing key of the score (available when the `privacy` mode is set to `privateLink`)
        type: string
      title:
        description: The title of the score
        type: string
      privacy:
        $ref: '#/definitions/ScorePrivacy'
      user:
        $ref: '#/definitions/UserPublicSummary'
      htmlUrl:
        description: The url where the score can be viewed in a web browser
        type: string
        format: url
    example:
      id: '000000000000000000000000'
      title: My score
      privacy: private
      user:
        id: '000000000000000000000001'
        username: flat
        name: Flat Team
        printableName: Flat Team
        picture: https://flat.io/img/logo_flat.svg
      htmlUrl: https://flat.io/score/000000000000000000000000

  ScoreLicense:
    description: |
      License of the creation. Read more about the Creative Commons licenses on https://creativecommons.org/licenses/
    type: string
    enum:
    - copyright
    - cc0
    - cc-by
    - cc-by-sa
    - cc-by-nd
    - cc-by-nc
    - cc-by-nc-sa
    - cc-by-nc-nd

  ScoreCreationType:
    description: The type of creation (an orginal, an arrangement)
    type: string
    enum:
    - original
    - arrangement
    - other

  ScoreDetails:
    type: object
    description: The score and all its details
    allOf:
    - $ref: '#/definitions/ScoreSummary'
    - type: object
      properties:
        subtitle:
          description: Subtitle of the score
          type: string
        lyricist:
          description: Lyricist of the score
          type: string
        composer:
          description: Composer of the score
          type: string
        description:
          description: Description of the creation
          type: string
        tags:
          description: Tags describing the score
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9]{1,30}$
        creationType:
          $ref: '#/definitions/ScoreCreationType'
        license:
          $ref: '#/definitions/ScoreLicense'
        licenseText:
          description: Additional license text written on the exported/printed score
          type: string
        durationTime:
          description: In seconds, an approximative duration of the score
          type: integer
        numberMeasures:
          description: The number of measures in the score
          type: integer
        mainTempoQpm:
          description: The main tempo of the score (in QPM)
          type: integer
        rights:
          $ref: '#/definitions/ResourceRights'
        collaborators:
          description: The list of the collaborators of the score
          type: array
          items:
            $ref: '#/definitions/ResourceCollaborator'
        creationDate:
          description: The date when the score was created
          type: string
          format: date-time
        modificationDate:
          description: The date of the last revision of the score
          type: string
          format: date-time
        publicationDate:
          description: The date when the score was published on Flat
          type: string
          format: date-time
        organization:
          description: |
            If the score has been created in an organization, the identifier of this organization. This property is especially used with the score privacy `organizationPublic`.
          type: string
        parentScore:
          description: |
            If the score has been forked, the unique identifier of the parent score.
          type: string
        instruments:
          description: |
            An array of the instrument identifiers used in the last version of the score. This is mainly used to display a list of the instruments in the Flat's UI or instruments icons. The format of the strings is `{instrument-group}.{instrument-id}`.
          type: array
          items:
            type: string
        googleDriveFileId:
          description: |
            If the user uses Google Drive and the score exists on Google Drive, this field will contain the unique identifier of the Flat score on Google Drive. You can access the document using the url: `https://drive.google.com/open?id={googleDriveFileId}`
          type: string
        likes:
          $ref: '#/definitions/ScoreLikesCounts'
        comments:
          $ref: '#/definitions/ScoreCommentsCounts'
        views:
          $ref: '#/definitions/ScoreViewsCounts'
        collections:
          description: The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
          type: array
          items:
            type: string
    example:
      id: '000000000000000000000000'
      title: My score
      subtitle: Subtitle of the score
      lyricist: Lyricist
      composer: Mr Awesome
      creationType: original
      privacy: private
      license: copyright
      licenseText: Copyright 2017 Mr Awesome
      durationTime: 70
      numberMeasures: 35
      user:
        id: '000000000000000000000001'
        username: flat
        name: Flat Team
        printableName: Flat Team
        picture: https://flat.io/img/logo_flat.svg
      htmlUrl: https://flat.io/score/000000000000000000000000
      creationDate: '2017-01-15T20:03:25.771Z'
      modificationDate: '2017-01-26T20:29:10.622Z'
      publicationDate: '2017-09-10T12:00:00.123Z'
      instruments: [keyboards.grand-piano, woodwinds.oboe, woodwinds.clarinet]
      rights:
        aclRead: true
        aclWrite: true
        aclAdmin: true
      collaborators:
      - aclRead: true
        aclWrite: true
        aclAdmin: true
        user:
          id: '000000000000000000000001'
          username: flat
          name: Flat Team
          printableName: Flat Team
          picture: https://flat.io/img/logo_flat.svg
      - aclRead: true
        aclWrite: false
        aclAdmin: false
        group:
          id: '0000000000000000000000043'
          name: 5th grade
          type: classTeachers
          userCount: 24
          readOnly: true
          organization: '0000000000000000000000042'
          creationDate: '2015-01-19T00:22:02.387Z'
      likes:
        total: 0
        weekly: 0
        monthly: 0
      comments:
        total: 0
        unique: 0
        weekly: 0
        monthly: 0
      views:
        total: 0
        weekly: 0
        monthly: 0
      organization: '000000000000000000000030'
      parentScore: '000000000000000000000040'
      googleDriveFileId: 0BCDEFAGA00000000000000

  ScorePrivacy:
    type: string
    enum: [public, private, organizationPublic, privateLink]
    description: |
      The score main privacy mode.

      - `public`: The score is public on the Internet. This one can be accessible at the url `https://flat.io/score/{score}` and can be modified and administred by specified collaborators users.
      - `private`: The score is private and can be only accessed, modified and administred by specified collaborators users.
      - `privateLink`: The score is private but can be accessed using a private link `htmlUrl` or the private key in the property `sharingKey`.
      - `organizationPublic`: _Available only with [Flat for Education](https://flat.io/edu)._ The score is public in the organization: users of the same organization can access to this one. The score can be modified and administred by specified collaborators users.

      The score can also be individually shared to a set of users or groups using the different collaborators API methods.

      When a file is synchronized from an external source (e.g. Google Drive) and the sharing options are changed on the source, Flat will chose the best privacy mode for the file.

      When using a [Flat for Education](https://flat.io/edu) account, some of the modes may not be available if disabled by an administrator of the organization (e.g. by default the `public` mode is not available).

  ScoreTrack:
    description: An audio track for a score
    type: object
    properties:
      id:
        description: The unique identifier of the score track
        type: string
      title:
        description: Title of the track
        type: string
      score:
        description: The unique identifier of the score
        type: string
      creator:
        description: The unique identifier of the track creator
        type: string
      creationDate:
        description: The creation date of the track
        type: string
        format: date-time
      modificationDate:
        description: The modification date of the track
        type: string
        format: date-time
      default:
        description: True if the track should be used as default audio source
        type: boolean
      state:
        $ref: '#/definitions/ScoreTrackState'
      type:
        $ref: '#/definitions/ScoreTrackType'
      url:
        description: The URL of the track
        type: string
      mediaId:
        description: |
          The unique identifier of the track when hosted on an external service.
          For example, if the url is `https://www.youtube.com/watch?v=dQw4w9WgXcQ`, `mediaId` will be `dQw4w9WgXcQ`
        type: string
      synchronizationPoints:
        type: array
        items:
          $ref: '#/definitions/ScoreTrackPoint'
    example:
      id: 59ecb20e563736b1e1f75dce
      title: Rick Astley - Never Gonna Give You Up
      type: youtube
      url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
      mediaId: dQw4w9WgXcQ
      creationDate: 2017-10-22T14:58:22.753000Z
      modificationDate: 2017-10-22T14:58:33.424000Z
      default: true
      state: completed
      creator: 5815d4b53269d90d2c80b71c
      score: 59a29d96f35a6411d7508bdd
      synchronizationPoints:
      - type: measure
        time: 0
        measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c
      - type: end
        time: 213

  ScoreTrackCreation:
    description: |
      Creation of a new track. This one must contain the URL of the track or the corresponding file
    type: object
    properties:
      title:
        description: Title of the track
        type: string
      default:
        description: True if the track should be used as default audio source
        type: boolean
      state:
        $ref: '#/definitions/ScoreTrackState'
      url:
        description: The URL of the track
        type: string
      synchronizationPoints:
        type: array
        items:
          $ref: '#/definitions/ScoreTrackPoint'
    example:
      title: Rick Astley - Never Gonna Give You Up
      url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
      default: true
      state: draft
      synchronizationPoints:
      - type: measure
        time: 0
        measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c
      - type: end
        time: 213

  ScoreTrackUpdate:
    description: |
      Update an existing track.
    type: object
    properties:
      title:
        description: Title of the track
        type: string
      default:
        description: True if the track should be used as default audio source
        type: boolean
      state:
        $ref: '#/definitions/ScoreTrackState'
      synchronizationPoints:
        type: array
        items:
          $ref: '#/definitions/ScoreTrackPoint'
    example:
      title: Rick Astley - Never Gonna Give You Up
      url: https://www.youtube.com/watch?v=dQw4w9WgXcQ
      default: true
      state: draft
      synchronizationPoints:
      - type: measure
        time: 0
        measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c
      - type: end
        time: 213

  ScoreTrackPoint:
    description: A track synchronization point
    type: object
    required:
    - type
    - time
    properties:
      type:
        type: string
        enum: [measure, end]
        description: The type of the synchronization point. If the type is `measure`, the measure uuid must be present in `measureUuid`
      measureUuid:
        type: string
        format: uuid
        description: The measure unique identifier
      time:
        type: number
        description: The corresponding time in seconds
    example:
      type: measure
      time: 0
      measureUuid: 5132a788-69e6-d0c6-84ec-4bd858658d7c

  ScoreTrackType:
    type: string
    description: The type of an audio track
    enum: [audio, soundcloud, youtube, vimeo]

  ScoreTrackState:
    description: State of the track
    type: string
    enum: [draft, completed, deleted]
    default: draft


  ScoreLikesCounts:
    type: object
    description: |
      A computed version of the weekly, monthly and total of number of likes
      for a score
    properties:
      total:
        description: The total number of likes of the score
        type: number
      weekly:
        description: The number of new likes during the last week
        type: number
      monthly:
        description: The number of new likes during the last month
        type: number
    example:
      total: 42
      weekly: 10
      monthly: 30

  ScoreCommentsCounts:
    type: object
    description: |
      A computed version of the total, unique, weekly and monthly number of
      comments added on the documents (this doesn't include inline comments).
    properties:
      total:
        description: The total number of comments added on the score
        type: number
      unique:
        description: The unique (1/user) number of comments added on the score
        type: number
      weekly:
        description: The weekly unique number of comments added on the score
        type: number
      monthly:
        description: The monthly unique number of comments added on the score
        type: number
    example:
      total: 42
      unique: 35
      weekly: 10
      monthly: 30

  ScoreViewsCounts:
    type: object
    description: |
      A computed version of the total, weekly, and monthly number of views of
      the score
    properties:
      total:
        description: The total number of views of the score
        type: number
      weekly:
        description: The weekly number of views of the score
        type: number
      monthly:
        description: The monthly number of views of the score
        type: number
    example:
      total: 42
      weekly: 10
      monthly: 30

  ScoreRevisionStatistics:
    type: object
    description: |
      The statistics related to the score revision (additions and deletions)
    properties:
      additions:
        description: The number of additions operations in the last revision
        type: number
      deletions:
        description: The number of deletions operations in the last revision
        type: number
    example:
      additions: 24
      deletions: 5

  ScoreData:
    type: string
    description: |
      The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.

      Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.
    example: <score-partwise version="3.0"></score-partwise>

  ScoreDataEncoding:
    type: string
    description: The optional encoding of the score data. This property must match the encoding used for the `data` property.
    enum: [base64]

  ScoreSource:
    type: object
    properties:
      googleDrive:
        description: |
          If the score is a file on Google Drive, this field property must contain its identifier. To use this method, the Drive file must be public or the Flat Drive App must have access to the file.
        type: string
    example:
      googleDrive: 0B-0000000000000001

  ScoreCreation:
    type: object
    description: A new created score
    required:
    - privacy
    properties:
      title:
        type: string
        description: |
          The title of the new score. If the title is too long, the API may trim this one.

          If this title is not specified, the API will try to (in this order):
            - Use the title contained in the file (e.g. [`movement-title`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-movement-title.htm) or [`credit-words`](https://usermanuals.musicxml.com/MusicXML/Content/EL-MusicXML-credit-words.htm) for [MusicXML](http://www.musicxml.com/) files).
            - Use the name of the file for files from a specified `source` (e.g. Google Drive) or the one in the `filename` property
            - Set a default title (e.g. "New Music Score")
      filename:
        type: string
        description: If this is an imported file, its filename
      privacy:
        $ref: '#/definitions/ScorePrivacy'
      data:
        $ref: '#/definitions/ScoreData'
      dataEncoding:
        $ref: '#/definitions/ScoreDataEncoding'
      source:
        $ref: '#/definitions/ScoreSource'
      collection:
        type: string
        description: |
          Unique identifier of a collection where the score will be created.
          If no collection identifier is provided, the score will be stored in the `root` directory.
      googleDriveFolder:
        type: string
        description: |
          If the user uses Google Drive and this properties is specified, the file will be created in this directory. The currently user creating the file must be granted to write in this directory.
    example:
      title: My new score
      privacy: private
      data: <score-partwise version="3.0"></score-partwise>
      googleDriveFolder: 0B-0000000000000000

  ScoreFork:
    type: object
    description: Options to fork the score
    properties:
      collection:
        type: string
        description: |
          Unique identifier of a collection where the score will be copied.
          If no collection identifier is provided, the score will be stored in the `root` directory.
  ScoreModification:
    type: object
    description: Edit the score metadata
    properties:
      title:
        type: string
        description: The title of the score
      privacy:
        $ref: '#/definitions/ScorePrivacy'
      sharingKey:
        $ref: '#/definitions/ResourceSharingKey'
      description:
        type: string
        maxLength: 1000
        description: Description of the creation
      tags:
        type: array
        items:
          type: string
        description: Tags describing the score
      creationType:
        $ref: '#/definitions/ScoreCreationType'
      license:
        $ref: '#/definitions/ScoreLicense'
    example:
      privacy: private

  CollectionTitle:
    description: The title of the collection
    type: string
    minLength: 1
    maxLength: 300

  Collection:
    type: object
    description: Collection of scores
    properties:
      id:
        type: string
        description: Unique identifier of the collection
      title:
        $ref: '#/definitions/CollectionTitle'
      htmlUrl:
        description: The url where the collection can be viewed in a web browser
        type: string
        format: url
      type:
        $ref: '#/definitions/CollectionType'
      privacy:
        $ref: '#/definitions/CollectionPrivacy'
      sharingKey:
        description: The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)
        type: string
      app:
        description: If this directory is dedicated to an app, the unique idenfier of this app
        type: string
      creationDate:
        description: The date when the collection was created
        type: string
        format: date-time
      user:
        $ref: '#/definitions/UserPublicSummary'
      rights:
        $ref: '#/definitions/ResourceRights'
      collaborators:
        description: The list of the collaborators of the collection
        type: array
        items:
          $ref: '#/definitions/ResourceCollaborator'
      capabilities:
        description: Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
        type: object
        properties:
          canEdit:
            description: |
              Whether the current user can modify the metadata for the collection
            type: boolean
          canShare:
            description: |
              Whether the current user can modify the sharing settings for the collection
            type: boolean
          canDelete:
            description: |
              Whether the current user can delete the collection
            type: boolean
          canAddScores:
            description: |
              Whether the current user can add scores to the collection

              If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.
            type: boolean
          canDeleteScores:
            description: |
              Whether the current user can delete scores from the collection

              If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.
            type: boolean
      collections:
        description: The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
        type: array
        items:
          type: string

  CollectionCreation:
    type: object
    required:
    - title
    - privacy
    properties:
      title:
        $ref: '#/definitions/CollectionTitle'
    example:
      title: Jazz scores
      privacy: private

  CollectionType:
    type: string
    enum: [root, regular, sharedWithMe, sharedWithGroup, trash]
    description: |
      Type of the collection.
      The type will influence the capabilitied available on the collections and how this collection is/can be populated.

  CollectionPrivacy:
    type: string
    enum: [private]
    description: |
      The collection main privacy mode.
      - `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.

  CollectionModification:
    type: object
    description: Edit the collection metadata
    properties:
      title:
        $ref: '#/definitions/CollectionTitle'

  ScoreRevision:
    type: object
    description: A score revision metadata
    properties:
      id:
        type: string
        description: The unique identifier of the revision.
      user:
        type: string
        description: The user identifier who created the revision
      collaborators:
        type: array
        items:
          type: string
          description: |
            The list of user identifier or collaborators who worked on this
            revision. This is list is built from the history of the revision
            specified during the creation of the revision.
      creationDate:
        type: string
        format: date-time
        description: The date when this revision was created
      description:
        type: string
        description: A description associated to the revision
      autosave:
        type: boolean
        description: |
          True if this revision was automatically generated by Flat and not on
          purpose by the user.
      statistics:
        $ref: '#/definitions/ScoreRevisionStatistics'
    example:
      user: '000000000000000000000020'
      collaborators: ['000000000000000000000010', '000000000000000000000020']
      description: New revision
      creationDate: '2017-01-26T20:29:10.622Z'
      autosave: true

  ScoreRevisionCreation:
    type: object
    description: A new created revision
    required:
    - data
    properties:
      data:
        $ref: '#/definitions/ScoreData'
      dataEncoding:
        $ref: '#/definitions/ScoreDataEncoding'
      autosave:
        type: boolean
        description: |
          Must be set to `true` if the revision was created automatically.
      description:
        type: string
        description: A description associated to the revision
    example:
      data: <score-partwise version="3.0"></score-partwise>
      history:
      - id: 000000000000000000000090
        userId: '000000000000000000000010'
        fnc: action.AddMeasure
        args:
          previousUuid: 888cb742-2110-a050-ba71-28300ba6d61f
          measureUuid: 0be9f739-3213-f312-bb0a-00ad0c787ef7
      autosave: true
      description: New revision

  ScoreCommentContext:
    type: object
    description: |
      The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position).
    required:
    - partUuid
    # - staffUuid
    - measureUuids
    - startTimePos
    - stopTimePos
    - startDpq
    - stopDpq
    properties:
      partUuid:
        type: string
        description: The unique identifier (UUID) of the score part
      staffIdx:
        type: number
        description: (Deprecated, use `staffUuid`) The identififer of the staff
      staffUuid:
        type: string
        description: The unique identififer (UUID) of the staff
      measureUuids:
        type: array
        items:
          type: string
        description: The list of measure UUIds
      startTimePos:
        type: number
      stopTimePos:
        type: number
      startDpq:
        type: number
      stopDpq:
        type: number
    example:
      partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b
      staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0
      measureUuids:
      - e6a6a60b-8710-f819-9a49-e907b19c6f1f
      - da83d93c-e3a6-3c73-1bbe-15e5131d6437
      - 056ec5eb-9213-df56-6ae8-d9b99673dc48
      startDpq: 1
      stopDpq: 1
      startTimePos: 2
      stopTimePos: 3

  ScoreCommentCreation:
    type: object
    description: Creation of a comment
    required:
    - comment
    properties:
      revision:
        type: string
        description: |
          The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.
      comment:
        type: string
        description: |
          The comment text that can includes mentions using the following format: `@[id:username]`.
      rawComment:
        type: string
        description: |
          A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.
      mentions:
        description: The list of user identifiers mentioned in this comment
        type: array
        items:
          type: string
      replyTo:
        type: string
        description: |
          When the comment is a reply to another comment, the unique identifier of the parent comment
      context:
        $ref: '#/definitions/ScoreCommentContext'
    example:
      revision: '000000000000000000000010'
      comment: '@[000000000000000000000000:flat] Great work!'
      rawComment: '@flat: Great work!'
      mentions: ['000000000000000000000000']
      replyTo: '000000000000000000000000'
      context:
        partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b
        staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0
        measureUuids:
        - e6a6a60b-8710-f819-9a49-e907b19c6f1f
        - da83d93c-e3a6-3c73-1bbe-15e5131d6437
        - 056ec5eb-9213-df56-6ae8-d9b99673dc48
        startDpq: 1
        stopDpq: 1
        startTimePos: 2
        stopTimePos: 3

  ScoreCommentUpdate:
    type: object
    description: Update of a comment
    properties:
      revision:
        type: string
        description: |
          The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains "last", the API will automatically take the last revision created.
      comment:
        type: string
        minLength: 1
        maxLength: 10000
        description: |
          The comment text that can includes mentions using the following format: `@[id:username]`.
      rawComment:
        type: string
        minLength: 1
        maxLength: 10000
        description: |
          A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set.
      context:
        $ref: '#/definitions/ScoreCommentContext'
    example:
      revision: '000000000000000000000011'
      comment: '@[000000000000000000000000:flat] Great work!'
      rawComment: '@flat: Great work!'
      mentions: ['000000000000000000000000']
      replyTo: '000000000000000000000000'
      context:
        partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b
        staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0
        measureUuids:
        - e6a6a60b-8710-f819-9a49-e907b19c6f1f
        - da83d93c-e3a6-3c73-1bbe-15e5131d6437
        - 056ec5eb-9213-df56-6ae8-d9b99673dc48
        startDpq: 1
        stopDpq: 1
        startTimePos: 2
        stopTimePos: 3

  ScoreComment:
    type: object
    description: Comment added on a sheet music
    properties:
      id:
        type: string
        description: The comment unique identifier
      type:
        type: string
        description: The type of the comment
        enum: [document, inline]
      user:
        type: string
        description: The author unique identifier
      score:
        type: string
        description: The unique identifier of the score where the comment was posted
      revision:
        type: string
        description: The unique identifier of revision the comment was posted
      replyTo:
        type: string
        description: |
          When the comment is a reply to another comment, the unique identifier of the parent comment
      date:
        type: string
        format: date-time
        description: The date when the comment was posted
      modificationDate:
        type: string
        format: date-time
        description: The date of the last comment modification
      comment:
        type: string
        description: |
          The comment text that can includes mentions using the following
          format: `@[id:username]`.
      rawComment:
        type: string
        description: |
          A raw version of the comment, that can be displayed without parsing
          the mentions.
      context:
        $ref: '#/definitions/ScoreCommentContext'
      mentions:
        type: array
        items:
          type: string
        description: The list of user identifier mentioned on the score
      resolved:
        type: boolean
        description: |
          For inline comments, the comment can be marked as resolved and will be hidden in the future responses
      resolvedBy:
        type: string
        description: |
          If the user is marked as resolved, this will contain the unique identifier of the User who marked this comment as resolved
      spam:
        type: boolean
        description: |
          `true  if the message has been detected as spam and hidden from other users
    example:
      id: '000000000000000000000010'
      type: inline
      user: '000000000000000000000001'
      score: '000000000000000000000042'
      revision: '000000000000000000000011'
      replyTo: '000000000000000000000000'
      date: '2017-01-26T20:29:10.622Z'
      modificationDate: '2017-01-26T21:29:10.622Z'
      comment: '@[000000000000000000000000:flat] Great work!'
      rawComment: '@flat: Great work!'
      context:
        partUuid: 91982db7-2e6d-285e-7a19-76b4bd005b8b
        staffUuid: 9395d8f3-f42b-47b6-8c5d-6ba704961ec0
        measureUuids:
        - e6a6a60b-8710-f819-9a49-e907b19c6f1f
        - da83d93c-e3a6-3c73-1bbe-15e5131d6437
        - 056ec5eb-9213-df56-6ae8-d9b99673dc48
        startDpq: 1
        stopDpq: 1
        startTimePos: 2
        stopTimePos: 3
      mentions: ['000000000000000000000000']
      resolved: true
      resolvedBy: '000000000000000000000000'
      spam: false


  OrganizationInvitationCreation:
    type: object
    description: The parameters to create an organization invitation
    properties:
      email:
        type: string
        description: The email address you want to send the invitation to
      organizationRole:
        $ref: '#/definitions/OrganizationRoles'
    example:
      email: edu@flat.io
      organizationRole: teacher

  OrganizationInvitation:
    type: object
    description: Details of an invitation to join an organization
    properties:
      id:
        type: string
        description: The invitation unique identifier
      organization:
        type: string
        description: The unique identifier of the Organization owning this class
      organizationRole:
        $ref: '#/definitions/OrganizationRoles'
      customCode:
        type: string
        description: Enrollment code to use when joining this organization
      email:
        type: string
        description: The email address this invitation was sent to
      invitedBy:
        type: string
        description: The unique identifier of the User who created this invitation
      usedBy:
        type: string
        description: The unique identifier of the User who used this invitation
    example:
      creationDate: 2017-07-02T15:05:15.576000Z
      customCode: u5raQ7pZ
      email: edu@flat.io
      id: 59590bab53b1af260610000
      invitedBy: 55b8d8f395c8db031ed00000
      organization: 55df29a6694e4a3953100000
      organizationRole: teacher
      usedBy:
  LmsName:
    description: LMS name
    type: string
    enum:
    - canvas
    - moodle
    - schoology
    - blackboard
    - desire2learn
    - sakai
    - schoolbox
    - other

  LtiCredentialsCreation:
    description: Creation of a couple of LTI 1.x OAuth credentials
    type: object
    required:
    - name
    - lms
    properties:
      name:
        description: Name of the couple of credentials
        type: string
        maxLength: 300
      lms:
        $ref: '#/definitions/LmsName'
    example:
      name: My couple of credentials for Canvas
      lms: canvas

  LtiCredentials:
    description: A couple of LTI 1.x OAuth credentials
    type: object
    properties:
      id:
        description: The unique identifier of this couple of credentials
        type: string
      name:
        description: Name of the couple of credentials
        type: string
      lms:
        $ref: '#/definitions/LmsName'
      organization:
        description: The unique identifier of the Organization associated to these credentials
        type: string
      creator:
        description: Unique identifier of the user who created these credentials
        type: string
      creationDate:
        description: The creation date of thse credentials
        type: string
        format: date-time
      lastUsage:
        description: The last time these credentials were used
        type: string
        format: date-time
      consumerKey:
        description: OAuth 1 Consumer Key
        type: string
      consumerSecret:
        description: OAuth 1 Consumer Secret
        type: string
    example:
      id: 59368be5c66caf895ee02387
      name: My couple of credentials for Canvas
      lms: canvas
      organization: 5832c801a4bedc05f4fb4993
      creator: 5832bf149995c4024bd6de7d
      creationDate: 2017-06-06T11:03:01.955000Z
      lastUsage: 2017-06-13T16:02:34.324000Z
      consumerKey: 200082F5-FAFD-4C6E-BB19-7DAB5D6264D4
      consumerSecret: 168b6181c05eae14298176a274273e4ebef0d15555fe3e80c6a98ccd57d0c3b6

  ClassCreation:
    description: Creation of a classroom
    type: object
    required:
    - name
    properties:
      name:
        type: string
        description: The name of the new class
        maxLength: 255
      section:
        type: string
        description: The section of the new class
        maxLength: 255
    example:
      name: Music Theory Course
      section: Music Theory 101

  ClassUpdate:
    description: Update of a classroom
    type: object
    properties:
      name:
        type: string
        description: The name of the class
        maxLength: 255
      section:
        type: string
        description: The section of the class
        maxLength: 255
    example:
      name: Music Theory Course
      section: Music Theory 101


  ClassDetails:
    description: A classroom
    type: object
    properties:
      id:
        type: string
        description: The unique identifier of the class
      state:
        $ref: '#/definitions/ClassState'
      name:
        type: string
        description: The name of the class
      section:
        type: string
        description: The section of the class
      description:
        type: string
        description: An optionnal description for this class
      organization:
        type: string
        description: The unique identifier of the Organization owning this class
      owner:
        type: string
        description: The unique identifier of the User owning this class
      creationDate:
        type: string
        format: date-time
        description: The date when the class was create
      enrollmentCode:
        type: string
        description: |
          [Teachers only] The enrollment code that can be used by the students to join the class
      theme:
        type: string
        description: The theme identifier using in Flat User Interface
      assignmentsCount:
        type: number
        description: The number of assignments created in the class
      studentsGroup:
        $ref: '#/definitions/GroupDetails'
      teachersGroup:
        $ref: '#/definitions/GroupDetails'
      googleClassroom:
        type: object
        description: Google Classroom course-related information
        properties:
          id:
            type: string
            description: The course identifier on Google Classroom
          alternateLink:
            type: string
            description: Absolute link to this course in the Classroom web UI
          name:
            type: string
            description: The name of the course on Google Classroom
          section:
            type: string
            description: The section of the course on Google Classroom
      googleDrive:
        type: object
        description: Google Drive course-related information provided by Google Classroom
        properties:
          teacherFolderId:
            type: string
            description: |
              [Teachers only] The Drive directory identifier of the teachers' folder
          teacherFolderAlternateLink:
            type: string
            description: |
              [Teachers only] The Drive URL of the teachers' folder
      lti:
        type: object
        description: Meta information provided by the LTI consumer
        properties:
          contextId:
            type: string
            description: Unique context identifier provided
          contextTitle:
            type: string
            description: Context title
          contextLabel:
            type: string
            description: Context label
      canvas:
        type: object
        description: Meta information provided by Canvs LMS
        properties:
          id:
            type: string
            description: Unique identifier of the course on Canvas
          domain:
            type: string
            description: Canvas instance domain (e.g. "canvas.instructure.com")
      clever:
        type: object
        description: Clever.com section-related information
        properties:
          id:
            type: string
            description: Clever section unique identifier
          creationDate:
            description: The creation date of the section on clever
            type: string
            format: date-time
          modificationDate:
            description: The last modification date of the section on clever
            type: string
            format: date-time
          subject:
            type: string
            description: Normalized subject of the course
            enum: [english/language arts, math, science, social studies, language, homeroom/advisory, interventions/online learning, technology and engineering, PE and health, arts and music, other]
          termName:
            type: string
            description: Name of the term when this course happens
          termStartDate:
            type: string
            format: date-time
            description: Beginning date of the term
          termEndDate:
            type: string
            format: date-time
            description: End date of the term

    example:
      id: '100000000000000000000001'
      state: active
      name: Music Theory 101
      section: Music Theory 101
      organization: '100000000000000000000002'
      owner: '100000000000000000000003'
      enrollmentCode: jm447ear
      theme: blue-8
      assignmentsCount: 10
      creationTime: 2017-01-25T09:47:34.544000Z
      googleClassroom:
        id: '00000000'
        alternateLink: http://classroom.google.com/c/music-theory
        name: Music Theory 101
        ownerId: '0000000000424242'
        creationTime: 2017-01-25T09:47:34.544000Z
        updateTime: 2017-01-25T09:47:33.481000Z
      googleDrive:
        teacherFolderAlternateLink: https://drive.google.com/drive/folders/0B-0000000000000000
        teacherFolderId: 0B-0000000000000000
      lti:
        contextId: '042'
        contextLabel: MUSIC
        contextTitle: Music Theory 101
      canvas:
        id: '000000000'

  ClassAttachmentCreation:
    description: |
      Attachment creation for an assignment or stream post.
      This attachment must contain a `score` or an `url`, all the details of this one will be resolved and returned as `ClassAttachment` once the assignment or stream post is created.
    type: object
    properties:
      type:
        type: string
        enum: [flat, link, exercise]
        description: The type of the attachment posted
      score:
        type: string
        description: |
          A unique Flat score identifier. The user creating the assignment must at least have read access to the document. If the user has admin rights, new group permissions will be automatically added for the
          teachers and students of the class.
      url:
        type: string
        description: The URL of the attachment.
    example:
      type: flat
      score: '000000000000000001'
      sharingMode: copy

  AssignmentCreation:
    description: Assignment creation details
    type: object
    properties:
      title:
        type: string
        description: Title of the assignment
      description:
        type: string
        description: Description and content of the assignment
      attachments:
        type: array
        items:
          $ref: '#/definitions/ClassAttachmentCreation'
      dueDate:
        type: string
        format: date-time
        description: |
          The due date of this assignment, late submissions will be marked as paste due. If not set, the assignment won't have a due date.
      scheduledDate:
        type: string
        format: date-time
        description: |
          The publication (scheduled) date of the assignment.
          If this one is specified, the assignment will only be listed to the teachers of the class.
    example:
      title: First assignment
      description: Get started with Flat
      attachments:
      - type: flat
        score: '0000000000000000'
      - type: link
        url: https://flat.io/developers
      scheduledDate: 2017-06-20T13:56:19.613000Z
      dueDate: 2017-07-12T13:56:19.613000Z

  AssignmentCopy:
    description: Assignment copy operation
    type: object
    required:
    - classroom
    properties:
      classroom:
        type: string
        description: The destination classroom where the assignment will be copied
    example:
      classroom: '0000000000000000'

  Assignment:
    description: Assignment details
    type: object
    properties:
      state:
        type: string
        enum: [draft, active, archived]
        description: State of the assignment
      title:
        type: string
        description: Title of the assignment
      classroom:
        type: string
        description: The unique identifier of the class where this assignment was posted
      description:
        type: string
        description: Description and content of the assignment
      attachments:
        type: array
        items:
          $ref: '#/definitions/MediaAttachment'
      submissions:
        type: array
        items:
          $ref: '#/definitions/AssignmentSubmission'
      creator:
        type: string
        description: |
          The User unique identifier of the creator of this assignment
      creationDate:
        type: string
        format: date-time
        description: The creation date of this assignment
      scheduledDate:
        type: string
        format: date-time
        description: |
          The publication (scheduled) date of the assignment.
          If this one is specified, the assignment will only be listed to the teachers of the class.
      dueDate:
        type: string
        format: date-time
        description: |
          The due date of this assignment, late submissions will be marked as
          paste due.
      googleClassroom:
        $ref: '#/definitions/GoogleClassroomCoursework'
    example:
      title: My first assignment
      description: Get started with Flat
      state: active
      creator: 5832bf149995c4024bd6de7d
      classroom: 58c4725345cd836264f0b29e
      creationDate: 2017-06-12T13:56:19.613000Z
      dueDate: 2017-07-12T13:56:19.613000Z
      scheduledDate: 2017-06-18T13:56:19.613000Z
      attachments:
      - type: flat
        score: '0000000000000000'
      - type: link
        url: https://flat.io/developers
      - type: video
        url: https://www.youtube.com/watch?v=SNbRUiBZ4Uw
        title: Flat - The online collaborative music notation software
        description: Discover Flat on https://flat.io
        html: <iframe width="560" height="315" src="https://www.youtube.com/embed/SNbRUiBZ4Uw" frameborder="0" allowfullscreen></iframe>
        thumbnailUrl: https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg
        thumbnailHeight: 1052
        thumbnailWidth: 1868
        authorName: Flat
        authorUrl: https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw
      googleClassroom:
        id: '1235665432'
        alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/detail
      submissions:
      - id: 58c4955c226ffff257211a90
        classroom: 58c4725345cd836264f0b29e
        assignment: 58c49068524c03ec576ca43c
        creator: 559eb5c7f0d4d5e46d03781d
        creationDate: 2017-03-12T00:25:00.748000Z
        submissionDate: 2017-03-12T00:25:22.748000Z
        attachments:
        - type: flat
          score: 58c4955a226ffff257211a8d
          title: Hello - Student
        googleClassroom:
          id: CgsI-00000000000
          state: turned_in
          alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission

  AssignmentSubmissionUpdate:
    description: Assignment Submission creation
    type: object
    properties:
      attachments:
        type: array
        items:
          $ref: '#/definitions/ClassAttachmentCreation'
      studentComment:
        type: string
        description: |
          An optionnal comment sent by the student when submitting his work
      submit:
        type: boolean
        description: If `true`, the submission will be marked as done
      returnFeedback:
        type: string
        description: The feedback associated with the return
    example:
      attachments:
      - type: flat
        score: 58c4955a226ffff257211a8d
        title: Hello - Student
      studentComment: Here is my great creation
      submit: true

  AssignmentSubmission:
    description: Assignment Submission
    type: object
    properties:
      id:
        type: string
        description: Unique identifier of the submission
      classroom:
        type: string
        description: |
          Unique identifier of the classroom where the assignment was posted
      assignment:
        type: string
        description: Unique identifier of the assignment
      creator:
        type: string
        description: The User identifier of the student who created the submission
      creationDate:
        type: string
        description: The date when the submission was created
      attachments:
        type: array
        items:
          $ref: '#/definitions/MediaAttachment'
      submissionDate:
        type: string
        description: The date when the student submitted his work
      studentComment:
        type: string
        description: |
          An optionnal comment sent by the student when submitting his work
      returnDate:
        type: string
        description: The date when the teacher returned the work
      returnFeedback:
        type: string
        description: The feedback associated with the return
      returnCreator:
        type: string
        description: |
          The User unique identifier of the teacher who returned the submission
      googleClassroom:
        $ref: '#/definitions/GoogleClassroomSubmission'
    example:
      id: 58c4955c226ffff257211a90
      classroom: 58c4725345cd836264f0b29e
      assignment: 58c49068524c03ec576ca43c
      creator: 559eb5c7f0d4d5e46d03781d
      creationDate: 2017-03-12T00:25:00.748000Z
      submissionDate: 2017-03-12T00:25:22.748000Z
      attachments:
      - type: flat
        score: 58c4955a226ffff257211a8d
        title: Hello - Student
      googleClassroom:
        id: CgsI-00000000000
        state: turned_in
        alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission

  GoogleClassroomCoursework:
    description: A coursework on Google Classroom
    type: object
    properties:
      id:
        type: string
        description: Identifier of the coursework assigned by Classroom
      state:
        type: string
        description: State of the coursework
      alternateLink:
        type: string
        description: Absolute link to this coursework in the Classroom web UI
    example:
      id: '1235665432'
      alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/detail

  GoogleClassroomSubmission:
    description: A coursework submission on Google Classroom
    type: object
    properties:
      id:
        type: string
        description: Identifier of the coursework submission assigned by Classroom
      state:
        type: string
        description: State of the submission on Google Classroom
      alternateLink:
        type: string
        description: Absolute link to this coursework in the Classroom web UI
    example:
      id: CgsI-00000000000
      state: turned_in
      alternateLink: http://classroom.google.com/c/music-theory/a/first-assignment/submissions/student/my-submission

  GroupDetails:
    description: The details of a group
    type: object
    properties:
      id:
        type: string
        description: The unique identifier of the group
      name:
        type: string
        description: The displayable name of the group
      type:
        $ref: '#/definitions/GroupType'
      organization:
        type: string
        description: The unique identifier of the Organization owning the group
      creationDate:
        type: string
        format: date-time
        description: The date when the group was create
      usersCount:
        type: number
        description: The number of students in this group
      readOnly:
        type: boolean
        description: |
          `true` if the properties and members of this group are in in read-only
    example:
      id: 58c4955c226ffff257211a00
      name: 5th Grade - Teachers
      type: classTeachers
      organization: '0000000000000000000000042'
      creationDate: 2017-07-02T15:02:40.207000Z
      usersCount: 2
      readOnly: false

  GroupType:
    description: The type of the group
    type: string
    enum:
    - generic
    - classTeachers
    - classStudents

  ClassState:
    description: The state of a classroom
    type: string
    enum:
    - active
    - inactive
    - archived

  MediaScoreSharingMode:
    description: The sharing mode of the score for classes post and assignments
    type: string
    enum: [read, write, copy]
    default: read

  MediaAttachment:
    description: |
      Media attachment. The API will automatically resolve the details, oEmbed,
      and media available if possible and return them in this object
    type: object
    properties:
      type:
        type: string
        enum: [rich, photo, video, link, flat, exercise]
        description: |
          The type of the assignment resolved:
          * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.
          * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.
      score:
        type: string
        description: An unique Flat score identifier
      revision:
        type: string
        description: An unique revision identifier of a score
      correct:
        type: boolean
        description: If the attachment is an exercise question, this state will describe if it is correct or not.For exercise assignments only.
      sharingMode:
        $ref: '#/definitions/MediaScoreSharingMode'
      title:
        type: string
        description: The resolved title of the attachment
      description:
        type: string
        description: The resolved description of the attachment
      html:
        type: string
        description: |
          If the attachment type is `rich` or `video`, the HTML code of the
          media to display
      htmlWidth:
        type: string
        description: If the `html` is available, the width of the widget
      htmlHeight:
        type: string
        description: If the `html` is available, the height of the widget
      url:
        type: string
        description: The url of the attachment
      thumbnailUrl:
        type: string
        description: |
          If the attachment type is `rich`, `video`, `photo` or `link`, a
          displayable thumbnail for this attachment
      thumbnailWidth:
        type: string
        description: |
          If the `thumbnailUrl` is available, the width of the thumbnail
      thumbnailHeight:
        type: string
        description: |
          If the `thumbnailUrl` is available, the width of the thumbnail
      authorName:
        type: string
        description: The resolved author name of the attachment
      authorUrl:
        type: string
        description: The resolved author url of the attachment
    example:
      type: video
      url: https://www.youtube.com/watch?v=SNbRUiBZ4Uw
      title: Flat - The online collaborative music notation software
      description: Discover Flat on https://flat.io
      html: <iframe width="560" height="315" src="https://www.youtube.com/embed/SNbRUiBZ4Uw" frameborder="0" allowfullscreen></iframe>
      thumbnailUrl: https://i.ytimg.com/vi/SNbRUiBZ4Uw/maxresdefault.jpg
      thumbnailHeight: 1052
      thumbnailWidth: 1868
      authorName: Flat
      authorUrl: https://www.youtube.com/channel/UCEUIbEP9Rba_g0r4eeGhmXw


  FlatErrorResponse:
    type: object
    properties:
      code:
        description: A corresponding code for this error
        type: string
      message:
        description: A printable message for this message
        type: string
      id:
        description: An unique error identifier generated for the request
        type: string
      param:
        description: The related parameter that caused the error
        type: string
    example:
      code: CLIENT_ERROR
      message: Invalid request
      id: '123456789'
